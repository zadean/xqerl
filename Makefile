.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables↲
MAKEFLAGS += --no-builtin-rules↲
MAKEFLAGS += --silent
DASH = printf %60s | tr ' ' '-' && echo

BUMP := 0.0.2

.PHONY: help
help: ## show this help
	echo 'After project maintainer (zadean) merges an pull request into the main branch '
	echo 'a xqerl github release can be created via a github action workflow'
	echo 'The action is triggered when an annotated tag is pushed to github'
	echo 'The tagged release version number is derived from "vsn" in src/xqerl.app.src'
	echo 'so this vsn must be updated (bumped), commited and pushed to the main branch'
	echo 'prior to creating and pushing an annotated tag to github'
	echo 'Using `make release` just automates the proccess of vsn number bumping, commiting and pushing,'
	echo 'followed by creating an annotated tag and pushing'
	@cat $(MAKEFILE_LIST) | 
	grep -oP '^[a-zA-Z_-]+:.*?## .*$$' |
	sort |
	awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

build: src/xqerl.app.src ## prior to a push, check if everthing can still build
	echo '##[ $@ ]##'
	rebar3 do deps, compile, edoc
	rebar3 hex build
	# firefox doc/index.html
	$(DASH)

release: bump commit watch tag view ## create a release by bumping vsn in xqerl.app.src

bump: src/xqerl.app.src
	echo '##[ $@ ]##'
	echo ' this updates vsn in $<'
	echo    "        Previous version: $(shell grep -oP '\d+\.\d+\.\d+' $<)"
	read -p "Enter New Release Version:" BUMP
	if ! echo "$${BUMP}" | grep -oP '\d+\.\d+\.\d+' >/dev/null
	then echo 'Wrong semver format!' && false
	fi
	echo    "   Check Release Version: $${BUMP}"
	read -p "Continue? (Y/N): " confirm && [[ $$confirm == [yY] || $$confirm == [yY][eE][sS] ]] || exit 1
	sed -i s/$(shell grep -oP '\d+\.\d+\.\d+' $<)/$${BUMP}/ $<
	$(DASH)

commit: src/xqerl.app.src
	echo '##[ $@ ]##'
	echo ' - commit file and push '
	VERSION="v$(shell grep -oP '\d+\.\d+\.\d+' $<)"
	echo "- release version: $$VERSION"
	git commit -m "Bumped xqerl app to version $${VERSION}" $<
	git push
	sleep 5
	$(DASH)
	
watch:
	echo '##[ $@ ]##'
	echo ' - commit push on *main* branch triggers "xqerl" workflow'
	echo ' - workflow compiles and installs xqerl then runs'
	echo '   smoke test checks. If checks fail run will exit with error'
	sleep 5
	DATABASE_ID=$(shell gh run list --limit 1 --jq '.[0].databaseId' --json databaseId)
	gh run watch --exit-status $$DATABASE_ID
	$(DASH)

tag: src/xqerl.app.src
	echo '##[ $@ ]##'
	echo ' - create an annotated tag from $< vsn, then push tag to repo'
	echo " - tag version: v$(shell grep -oP '\d+\.\d+\.\d+' $<)"
	git tag \
		-a v$(shell grep -oP '\d+\.\d+\.\d+' $<) \
		-m "xqerl update v$(shell grep -oP '\d+\.\d+\.\d+' $<)"
	git push --tags
	sleep 5
	$(DASH)

view:
	echo '##[ $@ ]##'
	echo ' - tag push triggers github actions "xqerl" workflow'
	echo '   the workflow creates'
	echo ' 1. a [tagged release](https://github.com/zadean/xqerl/releases/latest) with autogenerated release notes'
	echo ' 2. a installable release artifact download.'
	echo '    This tar artifact is a build that includes the erlang OTP runtime'
	echo ' 3. a alpine-xqerl docker image'
	echo '     The image is available in [github packages](https://github.com/zadean/xqerl/pkgs/container/xqerl)'
	echo ' 4  a published hex package and online docs '
	echo '    the xqerl package avaiable on [hex pm](https://hex.pm/packages/xqerl)'
	sleep 5
	DATABASE_ID=$(shell gh run list --limit 1 --jq '.[0].databaseId' --json databaseId)
	gh run view $$DATABASE_ID --exit-status --web
	$(DASH)
