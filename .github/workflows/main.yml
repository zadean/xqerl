name: build check release
on:
  push:
    branches: 'main'
    tags:
      - 'v*'
jobs:
  # allways runs - creates workflow _build cache and artifact
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache the _build dir
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: _build
        key: rebar-${{ hashFiles('./rebar.lock') }}
        # restore-keys: rebar-
    - name: If no cache hit get then deps and compile
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        rebar3 deps
        rebar3 compile
    - name: Build production tar
      run: |
        rebar3 as prod tar
        mkdir _release
        mv _build/prod/rel/xqerl/*.tar.gz _release/xqerl.tar.gz
    - name: Upload built artifact
      uses: actions/upload-artifact@v2
      with:
        name: xqerl-prod-tar
        path: _release/
  checks:
    if: ${{ github.ref_type == 'branch' }}    
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download built artifact
      uses: actions/download-artifact@v2
      with:
        name: xqerl-prod-tar
    - name: Unpack release tar and install xqerl application
      run: |
        mkdir -p  $HOME/.local/xqerl
        mkdir -p  $HOME/.local/bin
        tar -zxf xqerl.tar.gz -C $HOME/.local/xqerl
        ln -s $HOME/.local/xqerl/bin/xqerl $HOME/.local/bin
        ls -al $HOME/.local/bin
        echo $PATH
        which xqerl
    - name: Start the xqerl application
      run: |
        xqerl daemon
        sleep 2
        xqerl eval 'application:ensure_all_started(xqerl).'
    - name: Checks - OTP Beam inspection 
      run: |
          printf %60s | tr ' ' '-' && echo
          echo -n '-  ping: ' 
          xqerl ping | grep -oP 'pong'
          echo -n '-  pid: ' 
          xqerl pid | grep -oP '\d+'
          printf %60s | tr ' ' '-' && echo
          echo -n ' - set xqerl working directory: '
          xqerl eval "file:set_cwd('$(pwd)')."
          xqerl eval 'file:get_cwd().'
          printf %60s | tr ' ' '=' && echo
    - name: Checks - xqerl eval on running instance
      run: |
          printf %60s | tr ' ' '-' && echo
          echo ' - run a xQuery expression'
          xqerl eval 'xqerl:run("xs:token(\"cats\"), xs:string(\"dogs\"), true() ").' | \
          grep -oP '^\[\{xq.+$'
          printf %60s | tr ' ' '-' && echo
          echo ' - compile an xQuery file'
          xqerl eval 'xqerl:compile("docs/src/sudoku2.xq").' | \
          grep -oP 'file(.+)\.xq'
          printf %60s | tr ' ' '-' && echo
          echo ' - compile, run then grep the title'
          xqerl eval 'S = xqerl:compile("docs/src/sudoku2.xq"),binary_to_list(xqerl_node:to_xml(S:main(#{}))).' | \
          grep -oP '<title>(.+)</title>'
          printf %60s | tr ' ' '-' && echo
          echo -n ' - load an XML file into the DB: '
          xqerl eval \
          'xqldb_dml:insert_doc("http://xqerl.org/my_doc.xml","./test/QT3-test-suite/app/FunctxFn/functx_order.xml").' | \
          grep -oP 'ok'
          printf %60s | tr ' ' '-' && echo
          echo ' - view using the the xqerl:run/1 function with xQuery fn:doc#1 function'
          xqerl eval "binary_to_list(xqerl:run(\" 'http://xqerl.org/my_doc.xml' => doc() => serialize() \"))."
          printf %60s | tr ' ' '-' && echo
          echo -n ' - delete db doc '
          xqerl eval 'xqldb_dml:delete_doc("http://xqerl.org/my_doc.xml").' |  \
          grep -oP 'ok'
          printf %60s | tr ' ' '-' && echo
          echo -n ' - import into DB docs from directory: '
          xqerl eval 'xqldb_dml:import_from_directory("http://xqerl.org/tests/", "./test/QT3-test-suite").' | \
          grep -oP 'ok'
          printf %60s | tr ' ' '=' && echo
    - name: Stop xqerl
      run: xqerl stop
  release:
    if: ${{ github.ref_type == 'tag' }}    
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Fetch tags
      run: |
        git fetch --force --tags
        git describe --abbrev=0 || true
        printf %60s | tr ' ' '-' && echo
    - name: Download built artifact
      uses: actions/download-artifact@v2
      with:
        name: xqerl-prod-tar
    - name: Release artifact
      run: |
        VERSION=$(echo ${RELEASE} | sed s/v// )
        NOTE="$(git tag -l --format='%(contents:subject)' ${RELEASE})"
        echo $MESSAGE
        # note is annotated tag message
        mv ./xqerl.tar.gz  ./xqerl-${VERSION}.tar.gz
        gh release create ${RELEASE} "./xqerl-${VERSION}.tar.gz#xqerl-${VERSION}" \
        --notes "${NOTE}"  \
        --title "xqerl release ${RELEASE}" \
        --target  ${SHA} --prerelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
        SHA: ${{github.sha}}
        RELEASE: ${{github.ref_name}}
        MESSAGE: ${{ github.event.head_commit.message }}
  package:
    # TODO: if change to tag after testing workflow
    if: ${{ github.ref_type == 'tag' }}    
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Fetch tags
      run: |
        git fetch --force --tags
        git describe --abbrev=0 || true
        printf %60s | tr ' ' '-' && echo
    - name: Fetch the cached _build
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: _build
        key: rebar-${{ hashFiles('./rebar.lock') }}
    - name: Buildah build
      run: |
        VERSION=$(git describe --abbrev=0 | sed s/v// )
        ALPINE_VERSION=3.15
        ERLANG_VERSION=24-alpine
        echo "version: $VERSION"
        echo " - build from alpine version: $ALPINE_VERSION "
        BASE_CONTAINER=$(buildah from docker.io/erlang:${ERLANG_VERSION})
        buildah copy ${BASE_CONTAINER} ./ /home/
        buildah run ${BASE_CONTAINER} sh -c 'apk add --update git tar \
        && cd /home \
        && rebar3 as prod tar \
        && mkdir /usr/local/xqerl \
        && tar -zxf _build/prod/rel/*/*.tar.gz -C /usr/local/xqerl'
        CONTAINER=$(buildah from docker.io/alpine:${ALPINE_VERSION})
        buildah run ${CONTAINER} sh -c 'apk add --no-cache openssl ncurses-libs tzdata libstdc++ \
        && mkdir /usr/local/xqerl \
        && cd /usr/local/bin \
        && ln -s /usr/local/xqerl/bin/xqerl'
        buildah copy --from ${BASE_CONTAINER} $CONTAINER /usr/local/xqerl /usr/local/xqerl  
        printf %60s | tr ' ' '-' && echo
        echo " -  check"
        buildah run ${CONTAINER} sh -c 'ls -al /usr/local/bin | grep -q xqerl'
        buildah run ${CONTAINER} sh -c 'which xqerl' # should error if failsto find   
        #printf %60s | tr ' ' '-' && echo
        #buildah run ${CONTAINER}  sh -c 'echo $PATH' || true
        #printf %60s | tr ' ' '-' && echo
        echo " - set working dir and entry point"
        buildah config --cmd '' ${CONTAINER}
        buildah config --workingdir /usr/local/xqerl ${CONTAINER}
        buildah config --entrypoint '[ "xqerl", "foreground"]' ${CONTAINER}
        echo " - set environment vars"
        buildah config --env LANG=C.UTF-8 ${CONTAINER}
        buildah config --env HOME=/home ${CONTAINER}
        buildah config --env XQERL_HOME=/usr/local/xqerl ${CONTAINER}
        printf %60s | tr ' ' '-' && echo
        buildah run ${CONTAINER}  sh -c 'printenv' || true
        printf %60s | tr ' ' '-' && echo
        echo " - set stop signal"
        buildah config --stop-signal SIGQUIT ${CONTAINER}
        echo " - set labels"
        buildah config --label org.opencontainers.image.title='xqerl' ${CONTAINER}
        buildah config --label org.opencontainers.image.description='Erlang XQuery 3.1 Processor and XML Database' ${CONTAINER}
        buildah config --label org.opencontainers.image.source=https://github.com/${OWNER}/${REPO} ${CONTAINER} # where the image is built
        buildah config --label org.opencontainers.image.version='${VERSION}' ${CONTAINER} # version
        buildah commit --rm ${CONTAINER} localhost/xqerl
        printf %60s | tr ' ' '-' && echo
        echo " - list docker images"
        podman images
        printf %60s | tr ' ' '-' && echo
        #echo " - inspect image"
        #podman inspect localhost/xqerl | jq '.'
        echo " - run container with sh as entrypoint"
        podman run --rm --entrypoint '["/bin/sh", "-c"]' localhost/xqerl 'ls -al .'
        echo " - run container with published ports"
        podman run --name xq --publish 8081:8081 --detach localhost/xqerl
        sleep 2
        echo " - check log"
        printf %60s | tr ' ' '-' && echo
        podman logs -n -t --since 0 -l
        printf %60s | tr ' ' '-' && echo
        echo -n ' - check running: ' 
        podman container inspect -f '{{.State.Running}}' xq
        podman exec xq xqerl eval "application:ensure_all_started(xqerl)."
        podman ps -a
        podman stop xq || true
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push to GitHub Container Registry
      run: |
        VERSION=$(git describe --abbrev=0 | sed s/v// )
        echo " - tag image - ghcr.io/${OWNER}/xqerl:${VERSION}"
        buildah tag localhost/xqerl ghcr.io/${OWNER}/xqerl:${VERSION}
        buildah push ghcr.io/${OWNER}/xqerl:${VERSION}
      env:
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
