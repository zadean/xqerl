name: build check release
on:
  push:
    branches: 'feat*'
  pull_request:
    branches:
      - '**:feat**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: _build
        key: rebar-${{ hashFiles('./rebar.lock') }}
        # restore-keys: rebar-
    - name: Cache dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        rebar3 deps
        rebar3 compile
    - name: build production tar
      run: |
        rebar3 as prod tar
        mkdir _release
        mv _build/prod/rel/xqerl/*.tar.gz _release/xqerl.tar.gz
    - name: Upload built artifact
      uses: actions/upload-artifact@v2
      with:
        name: xqerl-prod-tar
        path: _release/
  checks:
    if: ${{ github.ref_type == 'branch' }}    
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download built artifact
      uses: actions/download-artifact@v2
      with:
        name: xqerl-prod-tar
    - name: Unpack release tar and install xqerl application
      run: |
        mkdir -p  $HOME/.local/xqerl
        mkdir -p  $HOME/.local/bin
        tar -zxf xqerl.tar.gz -C $HOME/.local/xqerl
        ln -s $HOME/.local/xqerl/bin/xqerl $HOME/.local/bin
        ls -al $HOME/.local/bin
        echo $PATH
        which xqerl
    - name: Start the xqerl application
      run: |
        xqerl daemon
        sleep 2
        xqerl eval 'application:ensure_all_started(xqerl).'
    - name: Checks - OTP Beam inspection 
      run: |
          printf %60s | tr ' ' '-' && echo
          echo -n '-  ping: ' 
          xqerl ping | grep -oP 'pong'
          echo -n '-  pid: ' 
          xqerl pid | grep -oP '\d+'
          printf %60s | tr ' ' '-' && echo
          echo -n ' - set xqerl working directory: '
          xqerl eval "file:set_cwd('$(pwd)')."
          xqerl eval 'file:get_cwd().'
          printf %60s | tr ' ' '=' && echo
    - name: Checks - xqerl eval on running instance
      run: |
          printf %60s | tr ' ' '-' && echo
          echo ' - run a xQuery expression'
          xqerl eval 'xqerl:run("xs:token(\"cats\"), xs:string(\"dogs\"), true() ").' | \
          grep -oP '^\[\{xq.+$'
          printf %60s | tr ' ' '-' && echo
          echo ' - compile an xQuery file'
          xqerl eval 'xqerl:compile("docs/src/sudoku2.xq").' | \
          grep -oP 'file(.+)\.xq'
          printf %60s | tr ' ' '-' && echo
          echo ' - compile, run then grep the title'
          xqerl eval 'S = xqerl:compile("docs/src/sudoku2.xq"),binary_to_list(xqerl_node:to_xml(S:main(#{}))).' | \
          grep -oP '<title>(.+)</title>'
          printf %60s | tr ' ' '-' && echo
          echo -n ' - load an XML file into the DB: '
          xqerl eval \
          'xqldb_dml:insert_doc("http://xqerl.org/my_doc.xml","./test/QT3-test-suite/app/FunctxFn/functx_order.xml").' | \
          grep -oP 'ok'
          printf %60s | tr ' ' '-' && echo
          echo ' - view using the the xqerl:run/1 function with xQuery fn:doc#1 function'
          xqerl eval "binary_to_list(xqerl:run(\" 'http://xqerl.org/my_doc.xml' => doc() => serialize() \"))."
          printf %60s | tr ' ' '-' && echo
          echo -n ' - delete db doc '
          xqerl eval 'xqldb_dml:delete_doc("http://xqerl.org/my_doc.xml").' |  \
          grep -oP 'ok'
          printf %60s | tr ' ' '-' && echo
          echo -n ' - import into DB docs from directory: '
          xqerl eval 'xqldb_dml:import_from_directory("http://xqerl.org/tests/", "./test/QT3-test-suite").' | \
          grep -oP 'ok'
          printf %60s | tr ' ' '=' && echo
    - name: Checks - Features and Issue Resolution
      run: |
        printf %60s | tr ' ' '=' && echo
        printf %60s | tr ' ' '=' && echo
    - name: cowboy static assets handler - issue 46 
      run: |
        echo '- use curl to check if image in priv/static/assets dir is reachable'
        printf %60s | tr ' ' '=' && echo
        curl -sSL -D - http://localhost:8081/assets/images/logo.png -o /dev/null
        curl -sSL -D - http://localhost:8081/assets/images/logo.png -o /dev/null | grep -q '200' 
        printf %60s | tr ' ' '=' && echo
    - name:  after install have a xqerl greeter #48 
      run: |
        echo '- use curl to check if http://localhost:8081/xqerl is reachable'
        printf %60s | tr ' ' '=' && echo
        curl -sSL -D - http://localhost:8081/xqerl -o /dev/null
        printf %60s | tr ' ' '=' && echo
        curl -sS http://localhost:8081/xqerl | grep -oP '<title>.+</title>'
        printf %60s | tr ' ' '=' && echo    - name: Stop xqerl
    - name:  stop xqerl
      run: xqerl stop
  rest_db_checks:
    if: ${{ github.ref_type == 'branch' }}    
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download built artifact
      uses: actions/download-artifact@v2
      with:
        name: xqerl-prod-tar
    - name: Unpack release tar and install xqerl application
      run: |
        mkdir -p  $HOME/.local/xqerl
        mkdir -p  $HOME/.local/bin
        tar -zxf xqerl.tar.gz -C $HOME/.local/xqerl
        ln -s $HOME/.local/xqerl/bin/xqerl $HOME/.local/bin
    - name: Start the xqerl application
      run: |
        xqerl daemon
        sleep 2
        xqerl eval 'application:ensure_all_started(xqerl).'
    - name: POST XML, create XDM document-node resource
      run: |
        CHECK=POST_XML_DATA
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\n' \
        --header 'Content-Type: application/xml' \
        --header "Slug: ${RESOURCE}" \
        --data '<test>data</test>' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 201 \]'
        echo '- response headers should include a location header'
        cat  ${CHECK_PATH}/headers.txt | grep -oP '^location.+$'
        printf %60s | tr ' ' '='
    - name: POST JSON array create XDM array resource
      run: |
        CHECK=POST_JSON_ARRAY
        COLLECTION=example.com/docs
        RESOURCE=json-data.array
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\n' \
        --header 'Content-Type: application/json' \
        --header "Slug: ${RESOURCE}" \
        --data '[1,2,3]' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        grep -q 'response code \[ 201 \]' ${CHECK_PATH}/write-out.txt
        echo '- response headers should include a location header'
        grep -qP '^location.+$' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '='
    - name: POST JSON object create XDM map resource
      run: |
        CHECK=POST_JSON_MAP
        COLLECTION=example.com/docs
        RESOURCE=json-data.map
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\n' \
        --header 'Content-Type: application/json' \
        --header "Slug: ${RESOURCE}" \
        --data '{"check": "mate"}' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        grep -q 'response code \[ 201 \]' ${CHECK_PATH}/write-out.txt
        echo '- response headers should include a location header'
        grep -qP '^location.+$' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '='
    - name: POST - unsupported media type
      run: |
        CHECK=POST_MSWORD
        COLLECTION=example.com/docs
        RESOURCE=foo.data
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\n' \
        --header 'Content-Type: application/msword' \
        --header "Slug: ${RESOURCE}" \
        --data 'foo' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return "Unsupported Media Type" status'
        grep -qoP 'HTTP(.+)415(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: GET - list resources in database collection as text
      run: |
        CHECK=GET_LIST_COLLECTION_RESOURCES_AS_TEXT
        CHECK_PATH=checks/${CHECK}/example.com/docs
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header "Accept: text/plain" \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/output.txt \
        http://localhost:8081/db/example.com/docs > ${CHECK_PATH}/write-out.txt
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        echo '- content-type should be text/plain'
        grep -oP 'content-type: text/plain' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo ' - show output text'
        echo ' ---------------'
        cat ${CHECK_PATH}/output.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        grep -oP 'response code \[ 200 \]' ${CHECK_PATH}/write-out.txt 
        printf %60s | tr ' ' '=' && echo
    - name: GET - list resources in database collection as json
      run: |
        CHECK=GET_LIST_COLLECTION_RESOURCES_AS_JSON
        CHECK_PATH=checks/${CHECK}/example.com/docs
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header "Accept: application/json" \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/output.txt \
        http://localhost:8081/db/example.com/docs > ${CHECK_PATH}/write-out.txt
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        echo '- content-type should be application/json'
        grep -oP 'content-type: application/json' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo ' - show output as json'
        echo ' ---------------'
        jq '.' ${CHECK_PATH}/output.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        grep -oP 'response code \[ 200 \]' ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
    - name: OPTIONS - allowable methods for collection
      run: |
        CHECK=OPTIONS_COLLECTION
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X OPTIONS \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        grep -oP 'HTTP(.+)200(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should have allow options'
        grep -oP 'allow:(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: HEAD - database collection available accept text
      run: |
        # NOTE: the use of the accept HEADER
        CHECK=HEAD_COLLECTION_AVAILABLE
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        --head  -H 'Accept: text/plain' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok status'
        grep -oP 'response code \[ 200 \]' ${CHECK_PATH}/write-out.txt
    - name: HEAD - database collection available accept xml
      run: |
        # NOTE: the use of the accept HEADER
        CHECK=HEAD_COLLECTION_AVAILABLE
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        --head  -H 'Accept: application/xml' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok status'
        grep -oP 'response code \[ 200 \]' ${CHECK_PATH}/write-out.txt
    - name: HEAD - database resource available
      run: |
        CHECK=HEAD_RESOURCE_AVAILABLE
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --head  -H 'Accept: application/xml' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok status'
        grep -oP 'response code \[ 200 \]' ${CHECK_PATH}/write-out.txt
        echo ' NOTE; head request can be used to get content size'
        echo ' - header should return content length'
        grep -oP 'content-length(.+)' ${CHECK_PATH}/headers.txt 
        if grep -oP 'content-length: 0' ${CHECK_PATH}/headers.txt >/dev/null
        then
        echo ' - header content length should be greater than zero: false'
        false
        else
        echo ' - header content length should be greater than zero: true'
        fi
        printf %60s | tr ' ' '=' && echo
# NOTE: resource retrieval via Accept Header
    - name: GET - accept XML - retrieve XDM document-node resource
      run: |
        CHECK=GET_ACCEPT_XML
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header 'Accept: application/xml' \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/${RESOURCE} \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show data'
        echo ' ---------------'
        cat ${CHECK_PATH}/${RESOURCE} && echo
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        grep -oP 'HTTP(.+)200(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: GET - accept JSON - retrieve XDM array resource 
      run: |
        CHECK=GET_ACCEPT_JSON_ARRAY
        COLLECTION=example.com/docs
        RESOURCE=json-data.array
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header 'Accept: application/json' \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/${RESOURCE} \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show data'
        echo ' ---------------'
        cat ${CHECK_PATH}/${RESOURCE} && echo
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        grep -oP 'HTTP(.+)200(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: GET - accept JSON - retrieve XDM map resource 
      run: |
        CHECK=GET_ACCEPT_JSON_MAP
        COLLECTION=example.com/docs
        RESOURCE=json-data.map
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header 'Accept: application/json' \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/${RESOURCE} \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show data'
        echo ' ---------------'
        cat ${CHECK_PATH}/${RESOURCE} && echo
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        grep -oP 'HTTP(.+)200(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: GET - unknown resource in collection
      run: |
        CHECK=GET_UKNOWN_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=erewhon.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return not found status'
        grep -oP 'HTTP(.+)404(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: PUT - update database XML resource
      run: |
        CHECK=PUT_UPDATE_XML_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        printf %60s | tr ' ' '=' && echo
        echo '- Update "document-node" resource'
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X PUT \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --header 'Content-Type: application/xml' \
        --data '<check>data</check>' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- should return "204" status'
        grep -oP 'HTTP(.+)204(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: DELETE - remove datebase resource
      run: |
        CHECK=DELETE_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X DELETE \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        echo '- should return "202 Accepted" status'
        grep -oP 'HTTP(.+)202(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: HEAD - resource no longer available ( resource has been deleted )
      run: |
        CHECK=HEAD_RESOURCE_NOW_UNAVAILABLE
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION} 
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X HEAD \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return not found status'
        grep -oP 'HTTP(.+)404(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: GET - unavailable resource ( previous resource has been deleted )
      run: |
        CHECK=GET_UNAVAILABLE_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=doc-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p ${CHECK_PATH}
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return not found status'
        grep -oP 'HTTP(.+)404(.+)' ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
    - name: Stop xqerl
      run: xqerl stop
