name: build check rest db api
# this workflow 
on:
  push:
    branches: 'dev-*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: _build
        key: rebar-${{ hashFiles('./rebar.lock') }}
        # restore-keys: rebar-
    - name: Cache dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        rebar3 deps
        rebar3 compile
    - name: build production tar
      run: |
        rebar3 as prod tar
        mkdir _release
        mv _build/prod/rel/xqerl/*.tar.gz _release/xqerl.tar.gz
    - name: Upload built artifact
      uses: actions/upload-artifact@v2
      with:
        name: xqerl-prod-tar
        path: _release/
  checks:
    if: ${{ github.ref_type == 'branch' }}    
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download built artifact
      uses: actions/download-artifact@v2
      with:
        name: xqerl-prod-tar
    - name: Unpack release tar and install xqerl application
      run: |
        mkdir -p  $HOME/.local/xqerl
        mkdir -p  $HOME/.local/bin
        tar -zxf xqerl.tar.gz -C $HOME/.local/xqerl
        ln -s $HOME/.local/xqerl/bin/xqerl $HOME/.local/bin
        ls -al $HOME/.local/bin
        echo $PATH
        which xqerl
    - name: Start the xqerl application
      run: |
        xqerl daemon
        sleep 2
        xqerl eval 'application:ensure_all_started(xqerl).'
    - name: POST XML data to create document-node resource
      run: |
        CHECK=POST_XML_DATA
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        --header 'Content-Type: application/xml' \
        --header "Slug: ${RESOURCE}" \
        --data '<test>data</test>' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        echo '- should return created status'
        cat ${CHECK_PATH}/headers.txt | grep -oP '^HTTP(.+)201(.+)$'
        echo '- headers should have location header'
        cat  ${CHECK_PATH}/headers.txt | grep -oP '^location.+$'
        printf %60s | tr ' ' '='
    - name: POST JSON array create XDM array resource
      run: |
        CHECK=POST_JSON_ARRAY
        COLLECTION=example.com/docs
        RESOURCE=json-data.array
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        --header 'Content-Type: application/json' \
        --header "Slug: ${RESOURCE}" \
        --data '[1,2,3]' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 201 \]'
        echo '- response headers should include a location header'
        cat  ${CHECK_PATH}/headers.txt | grep -oP '^location.+$'
        printf %60s | tr ' ' '='
    - name: POST JSON object create XDM map resource
      run: |
        CHECK=POST_JSON_MAP
        COLLECTION=example.com/docs
        RESOURCE=json-data.map
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --header 'Content-Type: application/json' \
        --header "Slug: ${RESOURCE}" \
        --data '{"check": "mate"}' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 201 \]'
        echo '- response headers should include a location header'
        cat  ${CHECK_PATH}/headers.txt | grep -oP '^location.+$'
        printf %60s | tr ' ' '='
    - name: POST - unsupported media type
      run: |
        CHECK=POST_JSON_MAP
        COLLECTION=example.com/docs
        RESOURCE=foo.data
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --header 'Content-Type: application/msword' \
        --header "Slug: ${RESOURCE}" \
        --data 'foo' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return "Unsupported Media Type" status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)415(.+)'
        printf %60s | tr ' ' '=' && echo
    # # - name: TODO! POST csv file to create XDM array resource
    # #   run: |
    # #     RESOURCE=testing-map-data.json
    # #     CHECK_PATH=checks/POST/example.com/docs
    # #     mkdir -p $CHECK_PATH
    # # - name: TODO! POST cmark converted markdown to create document-node resource
    # #   run: |
    # #     RESOURCE=testing-map-data.json
    # #     CHECK_PATH=checks/POST/example.com/docs
    # #     mkdir -p $CHECK_PATH
    - name: GET - list resources in database collection
      run: |
        CHECK=GET_LIST_COLLECTION_RESOURCES
        CHECK_PATH=checks/${CHECK}/example.com/docs
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/output.txt \
        http://localhost:8081/db/example.com/docs > ${CHECK_PATH}/write-out.txt
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo ' - show output text'
        echo ' ---------------'
        cat ${CHECK_PATH}/output.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok created status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 200 \]'
        printf %60s | tr ' ' '=' && echo
    - name: HEAD - database collection available
      run: |
        CHECK=HEAD_COLLECTION_AVAILABLE
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X HEAD \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 200 \]'
    - name: HEAD - database resource available
      run: |
        CHECK=HEAD_RESOURCE_AVAILABLE
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION} 
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X HEAD \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 200 \]' 
        echo ' NOTE; head request can be used to get content size'
        echo ' - header should return content length'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'content-length(.+)'
        if cat ${CHECK_PATH}/headers.txt | grep -oP 'content-length: 0' >/dev/null
        then
        echo ' - header content length should be greater than zero: false'
        false
        else
        echo ' - header content length should be greater than zero: true'
        fi
        printf %60s | tr ' ' '=' && echo
    - name: OPTIONS - allowable methods for collection
      run: |
        CHECK=OPTIONS_COLLECTION
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X OPTIONS \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)200(.+)'
        printf %60s | tr ' ' '=' && echo
        echo '- headers should have allow options'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'allow:(.+)'
        printf %60s | tr ' ' '=' && echo
# NOTE: resource retrieval via Accept Header
    - name: GET - accept XML - retrieve XDM document-node resource
      run: |
        CHECK=GET_ACCEPT_XML
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header 'Accept: application/json' \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/${RESOURCE} \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show data'
        echo ' ---------------'
        cat ${CHECK_PATH}/${RESOURCE} && echo
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)200(.+)'
        printf %60s | tr ' ' '=' && echo
    - name: GET - accept JSON - retrieve XDM array resource 
      run: |
        CHECK=GET_ACCEPT_JSON_ARRAY
        COLLECTION=example.com/docs
        RESOURCE=json-data.array
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header 'Accept: application/json' \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/${RESOURCE} \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show data'
        echo ' ---------------'
        cat ${CHECK_PATH}/${RESOURCE} && echo
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)200(.+)'
        printf %60s | tr ' ' '=' && echo
    - name: GET - accept JSON - retrieve XDM map resource 
      run: |
        CHECK=GET_ACCEPT_JSON_MAP
        COLLECTION=example.com/docs
        RESOURCE=json-data.map
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --header 'Accept: application/json' \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --output ${CHECK_PATH}/${RESOURCE} \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show data'
        echo ' ---------------'
        cat ${CHECK_PATH}/${RESOURCE} && echo
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return ok status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)200(.+)'
        printf %60s | tr ' ' '=' && echo
    - name: GET - unknown resource in collection
      run: |
        CHECK=GET_UKNOWN_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=erewhon.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' &&
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- headers should return not found status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)404(.+)'
        printf %60s | tr ' ' '=' && echo
    - name: PUT - update database XML resource
      run: |
        CHECK=PUT_UPDATE_XML_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        printf %60s | tr ' ' '=' && echo
        echo '- Update "document-node" resource'
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X PUT \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        --header 'Content-Type: application/xml' \
        --data '<check>data</check>' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- should return "204" status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)204(.+)'
        printf %60s | tr ' ' '=' && echo
    - name: DELETE - remove datebase resource
      run: |
        CHECK=DELETE_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X DELETE \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        echo '- should return "202 Accepted" status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)202 Accepted'
        printf %60s | tr ' ' '=' && echo
    - name: HEAD - resource no longer available ( resource has been deleted )
      run: |
        CHECK=HEAD_RESOURCE_NOW_UNAVAILABLE
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION} 
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X HEAD \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out '\nresponse code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat  ${CHECK_PATH}/headers.txt
        echo && printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return ok status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 404 \]'
        printf %60s | tr ' ' '=' && echo
    - name: GET - unavailable resource ( previous resource has been deleted )
      run: |
        CHECK=GET_UNAVAILABLE_RESOURCE
        COLLECTION=example.com/docs
        RESOURCE=testing-data.xml
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p ${CHECK_PATH}
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION}/${RESOURCE} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo '- response should return not found status'
        cat ${CHECK_PATH}/write-out.txt | grep -oP 'response code \[ 404 \]'
        printf %60s | tr ' ' '=' && echo
    - name: DELETE - remove all database resources in available collecion
      run: |
        CHECK=DELETE_COLLECTION
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        -X DELETE \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]\n' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat  ${CHECK_PATH}/write-out.txt
    - name: GET - unavailable collection ( previous collection has been deleted )
      run: |
        CHECK=GET_UNAVAILABLE_COLLECTION
        COLLECTION=example.com/docs
        CHECK_PATH=checks/${CHECK}/${COLLECTION}
        mkdir -p $CHECK_PATH
        curl --silent --show-error --connect-timeout 1 --max-time 2 \
        --dump-header ${CHECK_PATH}/headers.txt \
        --write-out 'response code [ %{http_code} ]\ncontent type [ %{content_type} ]' \
        http://localhost:8081/db/${COLLECTION} > ${CHECK_PATH}/write-out.txt
        printf %60s | tr ' ' '=' && echo
        echo ' - show headers'
        echo ' ---------------'
        cat ${CHECK_PATH}/headers.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo ' - show write out'
        echo ' ----------------'
        cat ${CHECK_PATH}/write-out.txt && echo
        printf %60s | tr ' ' '=' && echo
        echo '- should return "204" status'
        cat ${CHECK_PATH}/headers.txt | grep -oP 'HTTP(.+)404(.+)'
        printf %60s | tr ' ' '=' && echo
    - name: Stop xqerl
      run: xqerl stop
